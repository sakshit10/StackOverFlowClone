{"ast":null,"code":"import * as api from \"../api/index\";\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate(\"/\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async disptach => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    disptach({\n      type: \"FETCH_ALL_QUESTIONS\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    await api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate(\"/\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const voteQuestion = (id, value) => async dispatch => {\n  try {\n    await api.voteQuestion(id, value);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswered\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered);\n    dispatch({\n      type: \"POST_ANSWER\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","disptach","getAllQuestions","deleteQuestion","id","voteQuestion","value","postAnswer","answerData","noOfAnswers","answerBody","userAnswered","deleteAnswer","answerId"],"sources":["C:/Users/Sanket/Desktop/StackOverFlowClone/StackOverFlow-Clone/client/src/actions/question.jsx"],"sourcesContent":["import * as api from \"../api/index\";\r\n\r\nexport const askQuestion = (questionData, navigate) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.postQuestion(questionData);\r\n    dispatch({ type: \"POST_QUESTION\", payload: data });\r\n    dispatch(fetchAllQuestions());\r\n    navigate(\"/\");\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchAllQuestions = () => async (disptach) => {\r\n  try {\r\n    const { data } = await api.getAllQuestions();\r\n    disptach({ type: \"FETCH_ALL_QUESTIONS\", payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteQuestion = (id, navigate) => async (dispatch) => {\r\n  try {\r\n    await api.deleteQuestion(id);\r\n    dispatch(fetchAllQuestions());\r\n    navigate(\"/\");\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const voteQuestion = (id, value) => async (dispatch) => {\r\n  try {\r\n    await api.voteQuestion(id, value);\r\n    dispatch(fetchAllQuestions());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const postAnswer = (answerData) => async (dispatch) => {\r\n  try {\r\n    const { id, noOfAnswers, answerBody, userAnswered } = answerData;\r\n    const { data } = await api.postAnswer(\r\n      id,\r\n      noOfAnswers,\r\n      answerBody,\r\n      userAnswered\r\n    );\r\n    dispatch({ type: \"POST_ANSWER\", payload: data });\r\n    dispatch(fetchAllQuestions());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async (dispatch) => {\r\n  try {\r\n    await api.deleteAnswer(id, answerId, noOfAnswers);\r\n    dispatch(fetchAllQuestions());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,cAAc;AAEnC,OAAO,MAAMC,WAAW,GAAGA,CAACC,YAAY,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EACzE,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAML,GAAG,CAACM,YAAY,CAACJ,YAAY,CAAC;IACrDE,QAAQ,CAAC;MAAEG,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;IAClDD,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;IAC7BN,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMD,iBAAiB,GAAGA,CAAA,KAAM,MAAOI,QAAQ,IAAK;EACzD,IAAI;IACF,MAAM;MAAER;IAAK,CAAC,GAAG,MAAML,GAAG,CAACc,eAAe,CAAC,CAAC;IAC5CD,QAAQ,CAAC;MAAEN,IAAI,EAAE,qBAAqB;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAGA,CAACC,EAAE,EAAEb,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAClE,IAAI;IACF,MAAMJ,GAAG,CAACe,cAAc,CAACC,EAAE,CAAC;IAC5BZ,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;IAC7BN,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMO,YAAY,GAAGA,CAACD,EAAE,EAAEE,KAAK,KAAK,MAAOd,QAAQ,IAAK;EAC7D,IAAI;IACF,MAAMJ,GAAG,CAACiB,YAAY,CAACD,EAAE,EAAEE,KAAK,CAAC;IACjCd,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMS,UAAU,GAAIC,UAAU,IAAK,MAAOhB,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAM;MAAEY,EAAE;MAAEK,WAAW;MAAEC,UAAU;MAAEC;IAAa,CAAC,GAAGH,UAAU;IAChE,MAAM;MAAEf;IAAK,CAAC,GAAG,MAAML,GAAG,CAACmB,UAAU,CACnCH,EAAE,EACFK,WAAW,EACXC,UAAU,EACVC,YACF,CAAC;IACDnB,QAAQ,CAAC;MAAEG,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;IAChDD,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMc,YAAY,GAAGA,CAACR,EAAE,EAAES,QAAQ,EAAEJ,WAAW,KAAK,MAAOjB,QAAQ,IAAK;EAC7E,IAAI;IACF,MAAMJ,GAAG,CAACwB,YAAY,CAACR,EAAE,EAAES,QAAQ,EAAEJ,WAAW,CAAC;IACjDjB,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}